name: Build certship executables

permissions:
  contents: write
  packages: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry pyinstaller
          poetry install

      - name: Clean build directory (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          rm -rf build/* build/certship
          rm -rf bin/*

      - name: Clean build directory (Windows)
        if: runner.os == 'Windows'
        run: |
          Remove-Item -Recurse -Force build/*,build/certship,bin/* -ErrorAction SilentlyContinue
        shell: pwsh

      - name: Sync version from git tag
        if: matrix.os == 'ubuntu-latest'
        run: |
          TAG_VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          sed -i -E "s/^version = \"[0-9]+\.[0-9]+\.[0-9]+\"/version = \"$TAG_VERSION\"/" pyproject.toml

      - name: Commit and push version bump
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/') && matrix.os == 'ubuntu-latest'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml
          git diff --cached --quiet || git commit -m "chore: bump version to $TAG_VERSION [skip ci]"
          git push
        env:
          TAG_VERSION: ${{ github.ref_name }}

      - name: Build Python package (for PyPI)
        if: matrix.os == 'ubuntu-latest'
        run: poetry build

      - name: Build executable
        run: |
          pyinstaller --onefile -p src src/cli.py --name certship --distpath bin -y

      - name: Rename executable for platform
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            mv bin/certship bin/certship-ubuntu
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            mv bin/certship bin/certship-macos
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv bin/certship.exe bin/certship-windows.exe
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: certship-${{ matrix.os }}
          path: |
            bin/certship-*
            bin/certship-*.exe

      - name: Upload python package artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/*

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_artifacts
      - name: List all files
        run: find all_artifacts
      - name: Upload all platform artifacts to Release
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            all_artifacts/**/certship-*
            all_artifacts/**/certship-*.exe
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: all_artifacts/**/dist

